import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from app.main import ITMOAIChatbot, RecommendationStates, logging


class ITMOBot:
    def __init__(self, token: str, claude_api_key: str = None):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.chatbot = ITMOAIChatbot(claude_api_key=claude_api_key)
        self.user_backgrounds = {}
        
        # Register handlers
        self.register_handlers()
        
    def register_handlers(self):
        """Register all message handlers"""
        
        @self.dp.message(Command("start"))
        async def start_handler(message: types.Message):
            """Handle /start command"""
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üéì –û –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö")],
                    [KeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è"), KeyboardButton(text="üìö –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")],
                    [KeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–∞"), KeyboardButton(text="üìñ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")],
                    [KeyboardButton(text="üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é")]
                ],
                resize_keyboard=True
            )
            
            welcome_text = """–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –ò–¢–ú–û.

–ü–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –º–µ–∂–¥—É –¥–≤—É–º—è –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏:
‚Ä¢ ü§ñ **–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç** - –¥–ª—è ML-–∏–Ω–∂–µ–Ω–µ—Ä–æ–≤
‚Ä¢ üìä **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏** - –¥–ª—è AI Product Managers

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"""
            
            await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
        
        @self.dp.message(Command("help"))
        async def help_handler(message: types.Message):
            """Handle /help command"""
            help_text = """–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:

üìö **–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ** - —Å–ø–æ—Å–æ–±—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è, –∫–æ–Ω–∫—É—Ä—Å—ã, –æ–ª–∏–º–ø–∏–∞–¥—ã
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å** - —Ü–µ–Ω—ã, –±—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞, —Å—Ç–∏–ø–µ–Ω–¥–∏–∏
üìñ **–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã** - —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã, –ø—Ä–µ–¥–º–µ—Ç—ã
üíº **–ö–∞—Ä—å–µ—Ä–∞** - –∫–µ–º –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å, –∑–∞—Ä–ø–ª–∞—Ç—ã
üè¢ **–ü–∞—Ä—Ç–Ω–µ—Ä—ã** - –∫–æ–º–ø–∞–Ω–∏–∏-–ø–∞—Ä—Ç–Ω–µ—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º
üåç **–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏** - —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏

–ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ **–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é** –ø–æ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
            
            await message.answer(help_text, parse_mode="Markdown")
        
        @self.dp.message(Command("recommend"))
        async def recommend_command(message: types.Message, state: FSMContext):
            """Start recommendation flow"""
            await self.start_recommendation(message, state)
        
        @self.dp.message(lambda message: message.text == "üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é")
        async def recommendation_button_handler(message: types.Message, state: FSMContext):
            """Handle recommendation button"""
            await self.start_recommendation(message, state)
        
        @self.dp.message(lambda message: message.text == "üéì –û –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö")
        async def programs_handler(message: types.Message):
            """Handle programs info request"""
            response = self.chatbot.process_query("—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã")
            await message.answer(response, parse_mode="Markdown")
        
        @self.dp.message(lambda message: message.text == "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è")
        async def cost_handler(message: types.Message):
            """Handle cost info request"""
            response = self.chatbot.process_query("—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ –∏ –µ—Å—Ç—å –ª–∏ –±—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞")
            await message.answer(response, parse_mode="Markdown")
        
        @self.dp.message(lambda message: message.text == "üìö –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
        async def admission_handler(message: types.Message):
            """Handle admission info request"""
            response = self.chatbot.process_query("–∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∫–∞–∫–∏–µ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±—ã")
            await message.answer(response, parse_mode="Markdown")
        
        @self.dp.message(lambda message: message.text == "üíº –ö–∞—Ä—å–µ—Ä–∞")
        async def career_handler(message: types.Message):
            """Handle career info request"""
            response = self.chatbot.process_query("–∫–µ–º –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∫–∞–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã")
            await message.answer(response, parse_mode="Markdown")
        
        @self.dp.message(lambda message: message.text == "üìñ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
        async def disciplines_handler(message: types.Message):
            """Handle disciplines info request"""
            response = self.chatbot.process_query("–∫–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑—É—á–∞—é—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö")
            await message.answer(response, parse_mode="Markdown")
        
        # Recommendation flow handlers
        @self.dp.message(RecommendationStates.asking_technical_skills)
        async def process_technical_skills(message: types.Message, state: FSMContext):
            """Process technical skills answer"""
            user_id = message.from_user.id
            if user_id not in self.user_backgrounds:
                self.user_backgrounds[user_id] = {}
            
            answer = message.text.lower()
            self.user_backgrounds[user_id]['technical_skills'] = answer in ['–¥–∞', 'yes', '+']
            
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            
            await message.answer(
                "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª–∏ –≤–∞—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏?",
                reply_markup=keyboard
            )
            await state.set_state(RecommendationStates.asking_management_interest)
        
        @self.dp.message(RecommendationStates.asking_management_interest)
        async def process_management_interest(message: types.Message, state: FSMContext):
            """Process management interest answer"""
            user_id = message.from_user.id
            answer = message.text.lower()
            self.user_backgrounds[user_id]['management_interest'] = answer in ['–¥–∞', 'yes', '+']
            
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            
            await message.answer(
                "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–ª—é–±–æ–π —è–∑—ã–∫)?",
                reply_markup=keyboard
            )
            await state.set_state(RecommendationStates.asking_programming_experience)
        
        @self.dp.message(RecommendationStates.asking_programming_experience)
        async def process_programming_experience(message: types.Message, state: FSMContext):
            """Process programming experience answer"""
            user_id = message.from_user.id
            answer = message.text.lower()
            self.user_backgrounds[user_id]['programming_experience'] = answer in ['–¥–∞', 'yes', '+']
            
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            
            await message.answer(
                "–ó–Ω–∞–∫–æ–º—ã –ª–∏ –≤—ã —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º (—Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤–æ)?",
                reply_markup=keyboard
            )
            await state.set_state(RecommendationStates.asking_ml_knowledge)
        
        @self.dp.message(RecommendationStates.asking_ml_knowledge)
        async def process_ml_knowledge(message: types.Message, state: FSMContext):
            """Process ML knowledge answer"""
            user_id = message.from_user.id
            answer = message.text.lower()
            self.user_backgrounds[user_id]['ml_knowledge'] = answer in ['–¥–∞', 'yes', '+']
            
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            
            await message.answer(
                "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)?",
                reply_markup=keyboard
            )
            await state.set_state(RecommendationStates.asking_product_experience)
        
        @self.dp.message(RecommendationStates.asking_product_experience)
        async def process_product_experience(message: types.Message, state: FSMContext):
            """Process product experience answer and give recommendation"""
            user_id = message.from_user.id
            answer = message.text.lower()
            self.user_backgrounds[user_id]['product_experience'] = answer in ['–¥–∞', 'yes', '+']
            
            # Get recommendation
            recommendation = self.chatbot.recommend_program(self.user_backgrounds[user_id])
            
            # Get disciplines recommendation
            if "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" in recommendation and "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏" not in recommendation or recommendation.count("–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç") > recommendation.count("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"):
                disciplines_rec = self.chatbot.get_disciplines_recommendation('ai', self.user_backgrounds[user_id])
            elif "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏" in recommendation:
                disciplines_rec = self.chatbot.get_disciplines_recommendation('ai_product', self.user_backgrounds[user_id])
            else:
                disciplines_rec = ""
            
            # Create keyboard for return to main menu
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üéì –û –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö")],
                    [KeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è"), KeyboardButton(text="üìö –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")],
                    [KeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–∞"), KeyboardButton(text="üìñ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")],
                    [KeyboardButton(text="üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é")]
                ],
                resize_keyboard=True
            )
            
            full_response = f"{recommendation}\n\n{disciplines_rec}" if disciplines_rec else recommendation
            
            await message.answer(full_response, reply_markup=keyboard, parse_mode="Markdown")
            await state.clear()
        
        # Default message handler
        @self.dp.message()
        async def general_message_handler(message: types.Message):
            """Handle all other messages"""
            response = self.chatbot.process_query(message.text)
            await message.answer(response, parse_mode="Markdown")
    
    async def start_recommendation(self, message: types.Message, state: FSMContext):
        """Start the recommendation flow"""
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±—ç–∫–≥—Ä–∞—É–Ω–¥ (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏–Ω–∂–µ–Ω–µ—Ä–∏—è)?",
            reply_markup=keyboard
        )
        await state.set_state(RecommendationStates.asking_technical_skills)

async def main():
    # Get tokens from environment variables
    BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    CLAUDE_API_KEY = os.getenv("CLAUDE_API_KEY")
    
    if not BOT_TOKEN:
        logging.error("TELEGRAM_BOT_TOKEN not found in environment variables!")
        return
    
    # Create and start bot
    bot = ITMOBot(token=BOT_TOKEN, claude_api_key=CLAUDE_API_KEY)
    
    try:
        await bot.start()
    except Exception as e:
        logging.error(f"Bot stopped with error: {e}")


if __name__ == "__main__":
    # For local testing, you can set tokens here (DO NOT commit with real tokens!)
    # os.environ["TELEGRAM_BOT_TOKEN"] = "your-telegram-bot-token"
    # os.environ["CLAUDE_API_KEY"] = "your-claude-api-key"  # Optional
    
    asyncio.run(main())
