name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: |
          poetry lock
          poetry install --with dev --no-root
          poetry run pip install types-PyYAML

      - name: Run black
        run: poetry run black --check .

      - name: Run isort
        run: poetry run isort --check .

      - name: Run ruff
        run: poetry run ruff check .

      - name: Run mypy
        run: poetry run mypy --explicit-package-bases --ignore-missing-imports --allow-untyped-decorators --allow-subclassing-any --allow-any-generics --disable-error-code=misc --disable-error-code=no-untyped-def --disable-error-code=no-untyped-call --disable-error-code=no-any-return --disable-error-code=valid-type --disable-error-code=operator --disable-error-code=attr-defined --disable-error-code=syntax --disable-error-code=unreachable --disable-error-code=unused-ignore --disable-error-code=arg-type --disable-error-code=import-untyped src/ app/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: |
          poetry lock
          poetry install --with dev --no-root

      - name: Run tests
        run: |
          poetry run pytest --cov=src --cov-report=xml tests/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Build package
        run: |
          poetry lock
          poetry build

      - name: Store version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 3

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and export Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/pc-build-ai.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/pc-build-ai.tar
          retention-days: 1

  publish-package:
    name: Publish Python Package
    runs-on: ubuntu-latest
    needs: build-package
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          name: Release ${{ env.VERSION }}
          body: |
            Release ${{ env.VERSION }}

            See [CHANGELOG.md](CHANGELOG.md) for details.

  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/pc-build-ai.tar
          docker image ls -a

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Push Docker image
        run: |
          LOWERCASE_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          LOADED_IMAGE_TAG="${{ env.DOCKER_METADATA_OUTPUT_VERSION }}"
          LOADED_IMAGE_NAME="${LOWERCASE_REPO}:${LOADED_IMAGE_TAG}"

          echo "Using loaded image for tagging: ${LOADED_IMAGE_NAME}"
          echo "Target tags from metadata action: ${{ steps.meta.outputs.tags }}"

          for target_tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            echo "Tagging ${LOADED_IMAGE_NAME} to ${target_tag}"
            docker tag "${LOADED_IMAGE_NAME}" "${target_tag}"
            echo "Pushing ${target_tag}"
            docker push "${target_tag}"
          done

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [test, build-package]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Install dependencies
        run: |
          poetry lock
          poetry install --with dev --no-root
          poetry add mkdocs-material mike

      - name: Build documentation
        run: |
          poetry run mkdocs build -d site

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
