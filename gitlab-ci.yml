stages:
  - lint
  - test
  - build
  - publish
  - deploy

variables:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.6.1"
  DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  DOCKER_IMAGE_LATEST: ${CI_REGISTRY_IMAGE}:latest

.poetry-setup: &poetry-setup
  before_script:
    - python -V
    - pip install poetry==${POETRY_VERSION}
    - poetry --version
    - poetry config virtualenvs.in-project true
    - poetry lock
    - poetry install --with dev --no-root

lint:
  stage: lint
  image: python:${PYTHON_VERSION}-slim
  <<: *poetry-setup
  script:
    - poetry run black --check .
    - poetry run isort --check .
    - poetry run ruff check .
    - poetry run mypy src/ app.py

test:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  <<: *poetry-setup
  script:
    - poetry run pytest --cov=src --cov-report=xml tests/
  coverage: '/TOTAL.*\s+(\d+%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week

build-package:
  stage: build
  image: python:${PYTHON_VERSION}-slim
  <<: *poetry-setup
  script:
    - poetry build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG =~ /^v.*/

build-docker:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker save $DOCKER_IMAGE > image.tar
  artifacts:
    paths:
      - image.tar
    expire_in: 1 week

publish-package:
  stage: publish
  image: python:${PYTHON_VERSION}-slim
  <<: *poetry-setup
  script:
    - poetry config pypi-token.pypi ${PYPI_API_TOKEN}
    - poetry publish
  dependencies:
    - build-package
  rules:
    - if: $CI_COMMIT_TAG =~ /^v.*/

publish-docker:
  stage: publish
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker load < image.tar
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
        docker tag $DOCKER_IMAGE $DOCKER_IMAGE_LATEST
        docker push $DOCKER_IMAGE_LATEST
      fi
    - |
      if [[ "$CI_COMMIT_TAG" =~ ^v.* ]]; then
        VERSION=${CI_COMMIT_TAG#v}
        docker tag $DOCKER_IMAGE ${CI_REGISTRY_IMAGE}:$VERSION
        docker push ${CI_REGISTRY_IMAGE}:$VERSION

        # Также создаем теги для major.minor
        MAJOR_MINOR=$(echo $VERSION | grep -o "^[0-9]*\.[0-9]*")
        if [[ ! -z "$MAJOR_MINOR" ]]; then
          docker tag $DOCKER_IMAGE ${CI_REGISTRY_IMAGE}:$MAJOR_MINOR
          docker push ${CI_REGISTRY_IMAGE}:$MAJOR_MINOR
        fi
      fi
    - docker push $DOCKER_IMAGE
  dependencies:
    - build-docker
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG =~ /^v.*/

pages:
  stage: deploy
  image: python:${PYTHON_VERSION}-slim
  <<: *poetry-setup
  script:
    - poetry add mkdocs-material
    - poetry run mkdocs build -d public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG =~ /^v.*/
